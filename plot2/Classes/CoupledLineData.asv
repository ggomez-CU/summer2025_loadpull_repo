classdef CoupledLineData
    %UNTITLED Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        freq_list
        sampler_bias_list
        power_list

        folder
        comments
        dateandtime
        config

        LUT
        cal

        data
        freqpowerbiastable
    end
    
    methods
        function obj = CoupledLineData(folder)
            %CoupledLineData Construct an instance of this class
            %   Detailed explanation goes here
            obj.folder = folder;
            obj.LUT = LUTClass('/Users/gracegomez/Documents/Research Code Python/summer2025_loadpull_repo/data/LUT');
            
            obj = obj.loadfolder(folder);
        end
        
        function obj = add_data(obj,folder)
            if ~ismember(obj.folder,folder)
                obj.folder = [obj.folder; folder];
                obj = obj.loadfolder(folder); 
            end
        end

        function obj = loadfolder(obj, folder)
            %loadfolder Summary of this method goes here
            %   Detailed explanation goes here
            Files = dir(fullfile(folder,"*.json"));
            startPat = '_' + wildcardPattern + '_' + wildcardPattern + '_';
            endPat = 'GHz';
            for k = 1 : length(Files)
                try
                    obj.freq_list(k) = str2double(extractBetween(Files(k).name,startPat,endPat)) ;
                    obj = obj.loaddata(strcat(folder, '/', Files(k).name), obj.freq_list(k));
                catch
                end
            end
            % obj = obj.resortpower();
        end
        
        function obj = loaddata(obj,filename, frequency)
            %loaddata Summary of this method goes here
            %   Detailed explanation goes here
            json_txt = obj.loadjson(filename);
            fn = fieldnames(json_txt);
            
            for lp_idx=1:size(fn,1)
                disp(fn{lp_idx})
                if fn{lp_idx} == "Comments"
                    obj.comments = json_txt.(fn{lp_idx});
                elseif fn{lp_idx} == "DateAndTime"
                    obj.dateandtime = json_txt.(fn{lp_idx});
                elseif fn{lp_idx} == "Configuration"
                    obj.config = json_txt.(fn{lp_idx});
                    [folder2, ~, ~] = fileparts(json_txt.(fn{lp_idx}).Files.OutputCoupling_dB_);
                    obj.cal = CalibrationClass(replace(folder2,'C:/Users/grgo8200/Documents/GitHub','/Users/gracegomez/Documents/Research Code Python'));
                else
                    try
                        obj.data = [obj.data; obj.datapointtable(json_txt.(fn{lp_idx}),frequency,obj.get_setpower(fn{lp_idx}))]
                    catch
                    end
                end
            end
        end

        function obj = freqpowerbias(obj)
            [~,bins] = discretize(obj.data.GateV,5);
            for frequency = unique(obj.data.frequency)'
                for SetPower = unique(obj.data.SetPower)'
                    for bias = 1:size(bins,2)-1
                        rf = rowfilter(obj.data);
                        T = obj.data((rf.frequency == frequency & rf.SetPower == SetPower & rf.GateV > bins(bias) & rf.GateV < bins(bias+1)) ,:);
                        Sampler1_Range = max(T.Sampler1_V)-min(T.Sampler1_V);
                        Sampler2_Range = max(T.Sampler2_V)-min(T.Sampler2_V);
                        if isempty(Sampler1_Range); Sampler1_Range = nan; end;
                        if isempty(Sampler2_Range); Sampler2_Range = nan; end;
                        SamplerV_Mean = mean(T.GateV);
                        DUT_input_dBm_Mean = mean(T.DUT_input_dBm);
                        DUT_output_dBm_Mean = mean(T.DUT_output_dBm);
                        obj.freqpowerbiastable = [obj.freqpowerbiastable; table(Sampler1_Range,Sampler2_Range,SamplerV_Mean,DUT_output_dBm_Mean,DUT_input_dBm_Mean,SetPower,frequency)];
                    end

                end
            end
        end

        function json_txt = loadjson(obj, filename)
            [fid, msg] = fopen(filename); 
            raw = fread(fid,inf); 
            str = char(raw'); 
            fclose(fid); 
            json_txt = jsondecode(str);
        end

        function tableoutput = datapointtable(obj,json_txt, frequency,SetPower)
            try
                if isfield(json_txt,'Samplers')
                    if isfield(json_txt.Samplers,'x1'); Sampler1_V = json_txt.Samplers.x1; else; Sampler1_V = nan; end;
                    if isfield(json_txt.Samplers,'x2'); Sampler2_V = json_txt.Samplers.x2; else; Sampler2_V = nan; end;
                    if isfield(json_txt.Samplers,'Bias'); SamplerV = json_txt.Samplers.Bias; else; SamplerV = nan; end;
                    if isfield(json_txt.Samplers,'BiasCurrent'); SamplerI = json_txt.Samplers.BiasCurrent; else; SamplerI = nan; end;
                else
                    Sampler1_V = nan; Sampler2_V = nan; SamplerV = nan;SamplerI = nan; 
                end
                
                if isfield(json_txt,'DCParameters')
                    if isfield(json_txt.DCParameters,'gateCurrent'); GateI = json_txt.DCParameters.gateCurrent; else; GateI = nan; end;
                    if isfield(json_txt.DCParameters,'gateVoltage'); GateV = json_txt.DCParameters.gateVoltage; else; GateV = nan; end;
                    if isfield(json_txt.DCParameters,'drainCurrent'); DrainI = json_txt.DCParameters.drainCurrent; else; DrainI = nan; end;
                    if isfield(json_txt.DCParameters,'drainVoltage'); DrainV = json_txt.DCParameters.drainVoltage; else; DrainV = nan; end;
                else
                    GateI = nan; GateV = nan; DrainI = nan;DrainV = nan; 
                end

                if isfield(json_txt,'InputPower'); PNAPower = json_txt.InputPower; else; PNAPower = nan; end;
                if isfield(json_txt,'PowerMeter'); PowerMeter = json_txt.PowerMeter; else; PowerMeter = nan; end;

                if isfield(json_txt,'waveData')
                    %b2
                    if isfield(json_txt.waveData,'output_bwave')
                        OutputbWave_dBm = json_txt.waveData.output_bwave.dBm_mag;
                        OutputbWave_complex =  json_txt.waveData.output_bwave.y_real+j*json_txt.waveData.output_bwave.y_imag;
                    else
                        OutputbWave_dBm = nan;
                        OutputbWave_complex =  nan;
                    end
                    %a2
                    if isfield(json_txt.waveData,'output_awave')
                        OutputaWave_dBm = json_txt.waveData.output_awave.dBm_mag;
                        OutputaWave_complex =  json_txt.waveData.output_awave.y_real+j*json_txt.waveData.output_awave.y_imag;
                    else
                        OutputaWave_dBm = nan;
                        OutputaWave_complex =  nan;
                    end
                    %b1
                    if isfield(json_txt.waveData,'input_bwave')
                        InputbWave_dBm = json_txt.waveData.input_bwave.dBm_mag;
                        InputbWave_complex =  json_txt.waveData.input_bwave.y_real+j*json_txt.waveData.input_bwave.y_imag;
                    else
                        InputbWave_dBm = nan;
                        InputbWave_complex =  nan;
                    end
                    %a1
                    if isfield(json_txt.waveData,'input_awave')
                        InputaWave_dBm = json_txt.waveData.input_awave.dBm_mag;
                        InputaWave_complex =  json_txt.waveData.input_awave.y_real+j*json_txt.waveData.input_awave.y_imag;
                    else
                        InputaWave_dBm = nan;
                        InputaWave_complex =  nan;
                    end
                else
                    OutputbWave_dBm = nan; OutputbWave_complex = nan; OutputaWave_dBm = nan; OutputaWave_complex = nan;
                    InputbWave_dBm = nan; InputbWave_complex = nan; InputaWave_dBm = nan;InputaWave_complex = nan ;
                end

                if isfield(json_txt,'load_gamma')
                    SetGammaLoad =  json_txt.load_gamma.real+j*json_txt.load_gamma.imag;
                    GammaLoad = obj.LUT.tuner2s11(SetGammaLoad,frequency);
                else
                    SetGammaLoad = nan;
                    GammaLoad = nan;
                end

                if any(InputaWave_dBm) && any(OutputbWave_dBm)
                    [DUT_input_dBm,DUT_output_dBm] = obj.cal.power_correction(InputaWave_dBm, OutputbWave_dBm,frequency);
                else
                    DUT_input_dBm  = nan; DUT_output_dBm = nan;
                end

                if isfield(json_txt,'PAPerformance')
                    if isfield(json_txt.PAPerformance,'PAE'); PAE = json_txt.PAPerformance.PAE; else; PAE = nan; end;
                    if isfield(json_txt.PAPerformance,'gain'); Gain = json_txt.PAPerformance.gain; else; Gain = nan; end;
                    if isfield(json_txt.PAPerformance,'DCPower'); DCPower = json_txt.PAPerformance.DCPower; else; DCPower = nan; end;
                else
                    PAE = nan; Gain = nan; DCPower = nan;
                end

                tableoutput = table(frequency,Sampler1_V,Sampler2_V,SamplerI,SamplerV,...
                    GateI,GateV,DrainI,DrainV,...
                    SetPower,PNAPower,PowerMeter,...
                    OutputbWave_dBm,OutputbWave_complex,...
                    OutputaWave_dBm,OutputaWave_complex,...
                    InputbWave_dBm,InputbWave_complex,...
                    InputaWave_dBm,InputaWave_complex,...
                    SetGammaLoad,GammaLoad,PAE,Gain,DCPower,...
                    DUT_input_dBm,DUT_output_dBm);
            catch
            end
        end

        function obj = Av_fitting(obj)
                            
        end
 
        function [ScaleFactorSampler1_Av,ScaleFactorSampler1_Av, rmserr, GoodnessOfFit, Sampler1_phase, Sampler2_phase]  = samplerfitting(obj,order)
            samp_phs = obj.fitdirectphs3(gamma,samp1raw,samp2raw,[scale(2),scale(4), scale(3), scale(5)])
                Sampler1_phase = samp_phs
                Sampler2_phase = 
            fun1 = @(variable) abs(x*exp(j*variable(1))).^2 ...
                - (variable(2)*v1+variable(3)*v2+(variable(4)*v1).^3+(variable(5)*v2).^3+variable(6));
            ub = [pi,300,300,300,300,40];
            lb = [-pi,0,0,-100,-100,-400];
            x1 = [0,30,30,-1,-1,-2];
            opts = optimoptions('lsqnonlin','MaxFunctionEvaluations',1e4);
            [ScaleFactor, GoodnessOfFit] = lsqnonlin(fun1,x1,lb,ub,opts);

            if any(vars == ub) || any(vars == lb)
                disp(vars)
            end
            rmserr = rmse(abs(gamma),sqrt(scale(2)*samp1raw+scale(3)*samp2raw +...
                (scale(4)*samp1raw).^3+(scale(5)*samp2raw).^3 + scale(6)));
        end
                                samp1 = permute(obj.sampler1(:,:,pow_idx,freq_idx),[2 1 3 4]);
                    samp2 = permute(obj.sampler2(:,:,pow_idx,freq_idx),[2 1 3 4]);
                    gamma = permute(obj.complex_load(:,:,pow_idx,freq_idx),[2 1 3 4]);
                    for plotidx = 1:size(gamma,2)
                        [~, phsidx] = sort(angle(gamma(:,plotidx)));
                        gamma(:,plotidx) = gamma(phsidx,plotidx);
                        samp1(:,plotidx) = samp1(phsidx,plotidx);
                        samp2(:,plotidx) = samp2(phsidx,plotidx);
                    end
                    obj.scale1(:,pow_idx,freq_idx) = obj.addsamplerspng(samp1,samp2,gamma);
                    obj.scale3(:,pow_idx,freq_idx) = obj.addsamplers3png(samp1,samp2,gamma);


        function setpower = get_setpower(obj,fname)
            try
                startPat = 'LoadPoint_';
                endPat = '_0';
                setpower = str2double(replace(extractBetween(fname,startPat,endPat),'_','.'));
            catch
                startPat = 'PNAPower_';
                endPat = '_0';
                setpower = str2double(replace(extractBetween(fname,startPat,endPat),'_','.'));
            end
        end
    end
end

